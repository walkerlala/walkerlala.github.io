// ONCE
READ_ONCE(X) __load{once}(X)
WRITE_ONCE(X,V) { __store{once}(X,V); }

// Release Acquire and friends
smp_store_release(X,V) { __store{release}(*X,V); }
smp_load_acquire(X) __load{acquire}(*X)
rcu_assign_pointer(X,V) { __store{release}(X,V); }
lockless_dereference(X) __load{lderef}(X)
rcu_dereference(X) __load{deref}(X)

// RCU
rcu_read_lock() { __fence{rcu_read_lock}; }
rcu_read_unlock() { __fence{rcu_read_unlock};}
synchronize_rcu() { __fence{sync}; }
synchronize_rcu_expedited() { __fence{sync}; }

//Fences
smp_mb() { __fence{mb} ; }
smp_rmb() { __fence{rmb} ; }
smp_wmb() { __fence{wmb} ; }
smp_read_barrier_depends() { __fence{rb_dep}; }

xchg(X,V)  __xchg{mb}(X,V)
xchg_relaxed(X,V) __xchg{once}(X,V)
xchg_release(X,V) __xchg{release}(X,V)
xchg_acquire(X,V) __xchg{acquire}(X,V)

spin_lock(X) { __lock(X) ; }
spin_unlock(X) { __unlock(X) ; }
