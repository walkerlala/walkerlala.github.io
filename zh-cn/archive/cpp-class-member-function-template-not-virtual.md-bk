## C++ class member function template NOT virtual

C++的类成员函数模板能否被声明为virtual的？

偶然在SO上看到这个问题。我想，需要对C++的一整套机制(对象模型、模板、链接模型)有深入了解才能回答这个问题吧。

#### \#1, Motivation

下面的类声明是合法的吗?

```cpp
class Animal{
  public:
      template<typename T>
      virtual void make_sound(){
        //...
      }
};
```

在C++里面这是不合法的。

很显然这个类的作者企图同时使用C++的“多态”和“模板”功能。如果上面的代码合法，他就可以这样做了：

```cpp
class Dog : Animal {
  public:
      template<typename T>
      virtual void make_sound(){
        T.make_sound_for_dog();  //让 T 为 dog 发声， T 可以有很多种
      }
};

class Cat : Animal {
  public:
      template<typename T>
      virtual void make_sound() {
        T.make_sound_for_cat(); //让 T 为 cat 发声，T 可以有很多种
      }
};

class sound_make_1 {
  public:
      void make_sound_for_dog();
      void make_sound_for_cat();
};

class sound_maker_2 {
  public:
      void make_sound_for_dog();
      void make_sound_for_cat();
};

int main()
{
  Animal *a;
  
  a = new Dog();  //多态
  a.make_sound<sound_maker_1>() //使用 sound_maker_1 来为 Dog 发声(多态 + 模板)
  a.make_sound<sound_maker_2>() //使用 sound_maker_2 来为 Dog 发声(多态 + 模板)
  delete a;
  
  a = new Cat(); // 多态
  a.make_sound<sound_maker_1>(); //使用 sound_maker_1 来为 Cat 发声(多态 + 模板)
  a.make_sound<sound_maker_2>(); //使用 sound_maker_2 来为 Cat 发声(多态 + 模板)
}
```

上面的代码企图在使用C++的多态的同时，为`make_sound()`函数加上一个模板函数`T`，把"make_sound"这个功能委托给`T`，类似于设计模式中"工厂"的效果。但是很可惜，上面的代码在C++中是不合法的。

### \#2, Why

上面的代码不合法，同样是因为C++的编译与链接模型是"分离"的(至少是部分原因吧)。

- 从Unix/C开始，一个C/C++程序就可以被分开编译，然后用一个linker链接起来。这种模型有一个问题，就是各个编译单元可能对另一个编译单元一无所知。
- 同时，virtual function的实现大多利用了一个"[虚函数表](http://coolshell.cn/articles/12165.html)"的东西，这种实现中，一个类的内存布局(或者说虚函数表的内存布局)需要在这个类编译完成的时候就被完全确定。
- 一个 function template最后到底会被 instantiate 为多少个函数，要等整个程序(所有的编译单元)全部被编译完成才知道。

所以，由上面的矛盾可知，C++ 的 class memeber function 是不能既是 template 又是 virtual 的。

### \#3, Solution

要想实现上面 **#1** 中的效果（将OO-programming 和Generic programming结合），办法还是有的： [C++ Type Erasure Idiom](http://www.artima.com/cppsource/type_erasure.html)。

##### References

\[1]: [can a cpp class member function template be virtual](http://stackoverflow.com/questions/2354210/can-a-c-class-member-function-template-be-virtual)

\[2]: [how to achieve cpp virtual template function](http://stackoverflow.com/questions/5871722/how-to-achieve-virtual-template-function-in-c)

\[3]: [what is type erasure](http://stackoverflow.com/questions/34815513/what-is-type-erasure-in-c)

\[4]: [type erasure technique](http://stackoverflow.com/questions/5450159/type-erasure-techniques)

\[5]: [type erasure explained](http://davekilian.com/cpp-type-erasure.html)